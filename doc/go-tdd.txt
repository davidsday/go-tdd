*go-tdd.txt*  For Vim version 8.1 and Neovim 4.0+ Last change: 2021 May 24


*go-tdd.txt*   Runs go test -v -json -cover from within vim and displays a
red or green or yellow bar as results with some details as appropriate.

==============================================================================
CONTENTS                                                      *go-tdd-contents*

    1. Intro .......................... |go-tdd_Intro|
    2. Usage .......................... |go-tdd_Usage|
    3. Configuration .................. |go-tdd_Configuration|
    4. Internals and Behavior ..........|go-tdd_Behavior|
    5. License ........................ |go-tdd_License|
    6. Bugs ........................... |go-tdd_Bugs|
    7. Credits ........................ |go-tdd_Credits|

==============================================================================
1. Intro                                                          *go-tdd_Intro*

This is a Vim plugin that I wrote in Golang for my own use.

It is designed to work conveniently alongside Fatih Arslan's vim-go plugin,
which I consider to be my main Golang development tool.

go-tdd provides a red bar/green/bar (and yellow bar) Test Driven Development
programming experience to the Golang developer.  It does this via its own
parser for 'go test' output, which happens to be written entirely in Golang.

It adds two things to the vim-go/Golang TDD experience:

  RedBar/GreenBar/Refactor Test Driven Development style programming

  A marginally better 'vim-go go test' experience

The first is via the use of Vim's message line to provide red/green
bar fail/pass indications. I have also added a yellow bar message which
I use for messages about errors and situations do not represent a Green Bar result
(all tests passed), or a Red Bar (1 or more tests ran correctly but failed),
generally some sort of error or failure not related to a failing test.

Right now these yellow bar messages include
  [no tests found],
  [no tests to execute] - basically empty test file(s)
  [build failed] - go test could not successfully build,
  [received a panic] - successfully built but panic during execution,
  [test timed out] - go tests have a 15 second timeout by default
  [invalid JSON message] - go-tdd received invalid JSON from STDIN,
  and the receipt of any message on STDERR.

Since I am parsing "go test -v -json -cover" output, go-tdd expects
valid JSON.

I capture stderr separately and process it as best I can, by showing a
snippet of the message in a yellow bar.  If the STDERR message is
longer than can be shown in a one line yellow bar, I capture the entire
message in StdErr.txt in the package directory.

If go-tdd encounters non JSON lines on stdout, it issues a yellow
bar message to that effect and quits. I don't remember that happening
in actual use.

There also are supplemental messages providing detail information in each
red/green bars.  They report the number of tests run, passed, failed,
and skipped, in addition to the elapsed time for running all the tests
as provided by go test. Test coverage is reported on Green Bars.

I have also added Average Cyclomatic Complexity to the Green Bars.
This has little to do with testing but a lot to do with design and
it is a metric I want to be aware of.

==============================================================================
2. Usage                                                          *go-tdd_Usage*

If you are using vim-plug:
  Plug 'davidsday/go-tdd', {'for': [ 'go' ], 'branch': 'master', 'do': './install.sh'}
  Plug 'Valloric/ListToggle'
    If you use this 'Valloric/ListToggle', <Leader>q toggles the quickfix window open and closed
    Use <C-j> (down), and <C-k> (up) to navigate the quickfix window

    I use these mappings:

        <LocalLeader>t  runs RunGoGreenBarTests

        <LocalLeader>v  runs RunGoTestsVerbose

        <LocalLeader>a  toggles between yourfile.go and yourfile_test.go

        <LocalLeader>e  edits StdErr.txt

        <C-j> (down)    navigates the quickfix list up and down
        <C-k> (up)

        <Leader>q       toggles the quickfix list open and closed

    These mapping live in go-tdd/plugin/go-tdd-local.vim
    If you want to change them, it would be best if you put the changes
    or overwrites in either

        ~/.vim/after/ftplugin/go_local.vim
        or
        ~/.config/nvim/after/ftplugin/go_local.vim

    or similar file so your changes will not be overwritten by mine when
    you refresh the plugin from github.


  The RedBar/GreenBar/YellowBar message line lingers until any key is
  pressed (I typically just hit the space bar).



==============================================================================
3. Configuration                                         *go-tdd_Configuration*

go-tdd comes with a simple configuration that the user is free to modify

Each of these global Vim variables and mappings live in
    go-tdd/plugin/go_tdd_local.vim

if you need to change them, I suggest you copy that file to

    ~/.vim/after/ftplugin/go_local.vim
    or
    ~/.config/nvim/after/ftplugin/go_local.vim

and make your changes there.  That way your changes will not be overwritten
the next time you refresh this plugin from github, and they will be loaded
after this plugin is set up, so your preferences will prevail.

                                                           *g:gocyclo_ignore*

Default:
let g:gocyclo_ignore="'vendor|testdata'"

gocyclo accepts a regex it uses to ignore matching paths.  Golang development
projects commonly have both vendor and testdata directories which we likely do
not want gocyclo to analyze.  So I provide it with the regex to ignore these dirs.


                                                            *g:go_tdd_debug*


Default:
let g:go_tdd_debug=v:false

go-tdd checks the Vim global variable g:go_tdd_debug and if it is true
it will output the JSON it sends to Vim to disk in go-tdd-log.json in the
package directory.  This is now not particularly useful, unless you are curious
to see what is being sent to vim for display.

It is a remnent of a much larger JSON data structure which basically held
all important state for the program and saved itself to disk at a few key
points in the program run so as to help with any debugging needs.  Actually,
that large JSON data structure originated in the original version of go-tdd
which was written entirely in Vimscript.  I did not know how to test in Vimscript,
so I fell back on the strategy of "log everything" and I did my logging in
JSON.

That data structure was successively paired down to just what
was necessary for execution during the development in Golang and the refactor
stage of development, and this is all that is left, as testing incrementally
replaced logging as my primary quality assurance tool.  I may even completely
remove this in the future.

                                                            *g:go_tdd_timeout*
Default:
let g:go_tdd_timeout='10s'

go-tdd passes this variable to 'go test' on the command line.  'go test' will
itself call panic() if it cannot finish in that time or less.

If that happens, go-tdd will receive a specific panic message from 'go test'
and report it in a Yellow bar.

No StdErr.txt message and no quickfix list.

==============================================================================
4. Internals and Behavior                                    *go-tdd_Behavior*

go-tdd parses the output from 'go test -v -json -cover'

It decides what Vim needs to know to properly display the color bar and
load Vim's Quickfix List appropriately and passes that to Vim via JSON encoded
strings via STDOUT.

'go test -v -json -cover' outputs one continous string of '\n' separated JSON
encoded objects to STDOUT.

I have looked at a number of go test parsers, and they process these objects
one line at a time and discard them when they move on to the next line.  Some
buffer the previous line so they can look back at it if needed.  A few use
regular expressions that can span multiple lines.  None of this will work for
parsing go test's JSON output, which is an actual data structure, instead of
plain text output.

go-tdd converts that long string into a slice of strings, one to a line, which
it then converts to a slice of structs which are equivalent to the incoming JSON.

go-tdd does its work by looking at the individual structs in this slice one
at a time, in sequence.  Since it feels its way along this slice of structs by
index, if needed, it can both look forward and back any appropriate amount for
look ahead or look back purposes.

A good example of this is go test's handling of Example Functions.  Go has
the ability to embed actual working functions directly in either its
documentation or in its tests.

Example functions take no arguments and always output to STDOUT, often with
fmt.PrintF("%s", resultString) or similar.  We can embed a Golang comment
in the body of the Example Function which can specify the expected output of
the function, for use in evaluating if the function worked as we expected.

Unfortunately, the Go Team elected to handle Example Functions quite a bit
differently than other tests, thus making it difficult, but not impossible
to present Example Function tests results seemlessly with the other more
"Normal" tests.

For all "Normal" failing tests, go test outputs the test name, test file,
test line number, and a "fail" message, making it easy to load Vim's Quickfix
List with the info it needs.  But for Example tests, no file name, & no line
numbers, both of which Vim needs for a proper Quickfix List entry.

So you will notice that there is a binary copy of ag, The Silver Searcher,
in this plugin's bin directory.  It is there so we can take the info that
go test does give us, failing test name, and use The Silver Searcher to go
looking for it. Once found, The Silver Searcher returns to us the filename
and line number. I chose The Silver Searcher because it is by far the
smallest of the commonly available choices, 93K vs 140K vs 3.5M, for the
ones I considered using.

Additionally, as just mentioned, these "Normal" failing tests output a
message on the same line which is put out by the tests as it fails.
This is the "Got: 101, Want: 100" message that helps illuminate for the
programmer why the test failed.  Once again, the Go Team elected to handle
Example Functions quite a bit differently.  Instead of outputting a
convenient message right along with the other failed test info, they did
output what we need but over the next four lines of JSON.  This is why
I elected to handle our go test output in a slice of structs and traverse
it with an index.  This way we can simply index +1, +2, +3 and +4 and
extract the info we need.  Easy Peasy.  Actually we only need +2 and +4,
as +1 and +3 are the aformentioned strings "Got: " and "Want: ".

Because of all these issues, most go test drivers treat Golang's
Example Functions as lesser entities and either ignore them or give very
little info to the developer about them.  But go-tdd treats them as equals
and the developer needn't know the difference.

(This section just started May 28, 2021 and I'll expand it as I go)

==============================================================================
5. License                                                    *go-tdd_License*

MIT License

Copyright (c) 2021 David S. Day (https://github.com/davidsday)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
==============================================================================
6. Bugs                                                            *go-tdd_Bugs*

If you find a bug please post it on the issue tracker:
https://github.com/davidsday/go-tdd/issues

You may also email me at david.scott.day@gmail.com, but please also use
the issue tracker, to help keep things organized and recorded.

==============================================================================
7. Credits                                                      *go-tdd_Credits*

Thanks to Fatih Arslan for the vim-go Vim plugin.  I have enjoyed using it
immensely.

Special thanks to https://github.com/fzipp/gocyclo for making it so easy to
incorporate cyclomatic complexity metrics into go-tdd.  I am vaguely aware that
there are other versions out there but did not feel qualified to judge between
them and this is what vim-go's metalinter seemed to be using so I went with it.

Also a hat tip to Alfredo Deza of Pytest.vim fame.  Pytest was my first
introduction to testing and Python testing in particular, when I took
MIT's Introduction to Computation and Programming Using Python some years ago
now. They did not use Pytest in the course, but I did, and I have been a TDDer
ever since. When I decided to learn Go, I missed my Red and Green Bars.  I didn't
find any in my searches, thus this plugin.
==============================================================================





 vim:tw=78:ts=8:noet:ft=help:norl:
